package principal;

import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import Script.Generator;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.util.Calendar;
import promotions.PromotionFrame;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author losa
 */
public class ShowUsers extends javax.swing.JFrame {

    private DefaultTableModel model1;
    private DefaultTableModel model2;
    private int index;
    private String user;
    private int rowSelected;

    /**
     * Creates new form ShowUsers
     */
    public ShowUsers(int id) {
        this.user = "";
        this.rowSelected = 1;
        initComponents();
        this.model1 = (DefaultTableModel) serviceTable.getModel();
        this.model2 = (DefaultTableModel) suscriptorsTable.getModel();
        fillTipeService(id);
        this.fillTableSuscriptors(id);
        this.index = id;
        setLocationRelativeTo(null);
    }

    private void changePassword() {

        Calendar cal = Calendar.getInstance();

        String day2 = Integer.toString(cal.get(Calendar.DATE));
        String month2 = Integer.toString(cal.get(Calendar.MONTH) + 1);
        String year2 = Integer.toString(cal.get(Calendar.YEAR));

        String dt = year2 + "-" + month2 + "-" + day2;

        String sql = "INSERT INTO passwords(idServicio, pass, fechaCreacion)"
                + " VALUES(" + this.index + ",\'" + newpasswordLabel.getText() + "\',\'"+dt+"\')";
        //String sql = "UPDATE Servicio SET contrasenia = \'"+newpasswordLabel.getText()+"\' WHERE id = "+this.index;

        Server server = Server.getInstance();

        int idPassword=server.getInserted(sql);
        
        sql = "UPDATE Servicio SET contrasenia = \'"+newpasswordLabel.getText()+"\',lastPassword="+idPassword+" WHERE id = "+this.index;
        
        server.getResult(sql);
        
        this.model1.setRowCount(0);
        fillTipeService(this.index);

    }

    private void fillTipeService(int id) {
        Server server = Server.getInstance();

        String sql = "SELECT nombre, fechaPago, email, contrasenia, representante  FROM Servicio WHERE id = " + id + ";";
        ResultSet result = server.getResult(sql);

        try {
            if (result.next()) {
                String[] row = new String[5];

                row[0] = result.getString(1);
                row[1] = result.getString(2);
                row[2] = result.getString(3);
                row[3] = result.getString(4);
                row[4] = result.getString(5);

                this.model1.addRow(row);

            }

        } catch (SQLException ex) {

        }

    }

    private void fillTableSuscriptors(int id) {

        Server server = Server.getInstance();

        String sql = "SELECT S.user, C.UsuarioFacebook, C.whatsapp, S.estado "
                + " FROM Suscriptores as S "
                + " INNER JOIN Servicio AS Ser ON S.idservicios = Ser.id "
                + " INNER JOIN Clientes AS C ON S.idCliente = C.id "
                + " WHERE Ser.id = " + id + " ORDER BY S.estado ASC;";
        ResultSet result = server.getResult(sql);

        try {
            while (result.next()) {
                String[] row = new String[4];

                row[0] = result.getString(1);
                row[1] = result.getString(2);
                row[2] = result.getString(3);
                row[3] = result.getString(4);

                this.model2.addRow(row);

            }

        } catch (SQLException ex) {

        }

    }

    private void getUser() {

        ContactForm contact = new ContactForm();
        contact.filled(this.user, 2);
        contact.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        contact.setVisible(true);

    }

    private void getInfo() {
        String query = "SELECT email, contrasenia FROM Servicio WHERE   id = " + this.index + ";";
        Server server = Server.getInstance();
        ResultSet result = server.getResult(query);
        String textcopy = "";
        try {
            if (result.next()) {
                textcopy = result.getString(1) + "      " + result.getString(2);
            }

        } catch (SQLException ex) {
        }

        StringSelection ss = new StringSelection(textcopy);
        Toolkit tool = Toolkit.getDefaultToolkit();
        Clipboard clip = tool.getSystemClipboard();
        clip.setContents(ss, null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        serviceTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        suscriptorsTable = new javax.swing.JTable();
        generatorButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        newpasswordLabel = new javax.swing.JLabel();
        contactButton = new javax.swing.JButton();
        copyInfo = new javax.swing.JButton();
        promotionButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        serviceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Service", "Pay", "Email", "Password", "Representant"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(serviceTable);
        if (serviceTable.getColumnModel().getColumnCount() > 0) {
            serviceTable.getColumnModel().getColumn(0).setMinWidth(125);
            serviceTable.getColumnModel().getColumn(0).setMaxWidth(125);
            serviceTable.getColumnModel().getColumn(1).setMinWidth(45);
            serviceTable.getColumnModel().getColumn(1).setMaxWidth(45);
            serviceTable.getColumnModel().getColumn(2).setMinWidth(250);
            serviceTable.getColumnModel().getColumn(2).setMaxWidth(250);
        }

        suscriptorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "usuario", "Facebook", "Whatsapp", "Status"
            }
        ));
        suscriptorsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                suscriptorsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(suscriptorsTable);

        generatorButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        generatorButton.setText("Generate Password");
        generatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatorButtonActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButton2.setText("Change Password");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        newpasswordLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        newpasswordLabel.setForeground(new java.awt.Color(255, 51, 0));
        newpasswordLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        contactButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        contactButton.setText("Contact");
        contactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactButtonActionPerformed(evt);
            }
        });

        copyInfo.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        copyInfo.setText("Copy info");
        copyInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyInfoActionPerformed(evt);
            }
        });

        promotionButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        promotionButton.setText("Promotions");
        promotionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                promotionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 814, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(copyInfo)
                        .addGap(330, 330, 330)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(174, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(generatorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(promotionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(contactButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newpasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(137, 137, 137))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(copyInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(generatorButton)
                    .addComponent(newpasswordLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contactButton)
                    .addComponent(promotionButton))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatorButtonActionPerformed
        // TODO add your handling code here:
        Generator generator = Generator.getInstance();
        newpasswordLabel.setText(generator.getNewpassword());
    }//GEN-LAST:event_generatorButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.changePassword();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void contactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactButtonActionPerformed
        // TODO add your handling code here:
        this.getUser();

    }//GEN-LAST:event_contactButtonActionPerformed

    private void suscriptorsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_suscriptorsTableMouseClicked
        // TODO add your handling code here:

        this.rowSelected = suscriptorsTable.rowAtPoint(evt.getPoint());

        int columna = suscriptorsTable.columnAtPoint(evt.getPoint());
        if ((this.rowSelected > -1) && (columna > -1)) {
            System.out.println("Fila: " + rowSelected);
        }
        //System.out.println(modelo.getValueAt(fila,columna));
        //System.out.println("Value: "+ this.modelo.getValueAt(rowSelected, 1));
        //System.out.println("Index: "+this.modelo.getValueAt(rowSelected, 0));

        try {
            this.user = this.model2.getValueAt(this.rowSelected, 0).toString();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        System.out.println(this.user);
    }//GEN-LAST:event_suscriptorsTableMouseClicked

    private void copyInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyInfoActionPerformed
        // TODO add your handling code here:

        this.getInfo();
    }//GEN-LAST:event_copyInfoActionPerformed

    private void promotionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_promotionButtonActionPerformed
        // TODO add your handling code here:
        PromotionFrame comunication=new PromotionFrame(this.user);
        comunication.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        comunication.setVisible(true);
    }//GEN-LAST:event_promotionButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton contactButton;
    private javax.swing.JButton copyInfo;
    private javax.swing.JButton generatorButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel newpasswordLabel;
    private javax.swing.JButton promotionButton;
    private javax.swing.JTable serviceTable;
    private javax.swing.JTable suscriptorsTable;
    // End of variables declaration//GEN-END:variables
}
